#ifndef PATHOLOGYWORKSTATION_H
#define PATHOLOGYWORKSTATION_H

#include <QMainWindow>
#include <QDir>
#include <QStringList>
#include <memory>
#include <QDialog>

class MultiResolutionImage;
class QHBoxLayout;
class QVBoxLayout;
class QAction;
class QStatusBar;
class QMenuBar;
class PathologyViewer;
class WorkstationExtensionPluginInterface;
class QActionGroup;
class QSettings;
class QLabel;

/*

OWNERSHIP

Workstation is the owner of all the PathologyViews
Workstation is the owner of all Plugins, also the ToolPlugins generated by ExtensionPlugins
Workstation is the owner of the MultiResolutionImage
Viewer is the owner of RenderThread, TileManager, ScaleBar, MiniMap, RenderWorkers and the Scene

*/

class PathologyWorkstation : public QMainWindow
{
  Q_OBJECT

public:
  explicit PathologyWorkstation(QWidget* parent = 0);
  ~PathologyWorkstation();

  void setCacheSize(const unsigned long long& cacheMaxByteSize);
  void openFile(const QString& fileName);
  void openFile2(const QString& fileName);
  void on_actionClose_triggered2();
  unsigned long long getCacheSize() const;

signals:
  void newImageLoaded(std::weak_ptr<MultiResolutionImage>, const std::string&);
  void newImageLoaded2(std::weak_ptr<MultiResolutionImage>, const std::string&);
  void imageClosed();
  void closeimg(const QString&);
  void openf(const QString&);
  void fileSend(const QString&);

private slots:
  void on_actionClose_triggered();
  void on_actionOpen_triggered();
  void on_actionAbout_triggered();
  void on_actionSend_triggered();
  void on_actionsave_triggered();
  void on_actionConnect_triggered();
  void on_actionRotate_triggered();
  void onrat();
  void onrat2();
  void onrat3();
  void on_actionInfo_triggered();
  void on_actionflat_triggered();
  void on_actionone_triggered();
  void changeimg(QString);

private:
  static const char* sharedLibraryExtensions;
  std::shared_ptr<MultiResolutionImage> _img;
  unsigned long long _cacheMaxByteSize;
  QSettings* _settings;

  void closeEvent(QCloseEvent *event);
  
  // Plugins
  QDir _pluginsDir;
  std::vector<std::string> _extensionPluginFileNames;
  std::vector<std::string> _toolPluginFileNames;

  // GUI object
  QAction *actionOpen;
  QAction *actionClose;
  QAction *actionCloseall;
  QAction *save;
  QAction *actionConnect;
  QAction *rotate;
  QAction *info;
  QAction *flat;
  QAction *one;
  //QAction *actionSend;
  QAction *actionAbout;
  QActionGroup *_toolActions;
  QWidget *centralWidget;
  QHBoxLayout *horizontalLayout_2;
  PathologyViewer *pathologyView;
  PathologyViewer *view2;
  PathologyViewer *view3;
  PathologyViewer *view4;
  QMenuBar *menuBar;
  QMenu *menuFile;
  QMenu *menuView;
  QMenu *menuWindow;
  QMenu *menuTool;
  QMenu *menuImage;
  QMenu *menuHelp;
  QToolBar *mainToolBar;
  QStatusBar *statusBar;

  // Initialize the GUI
  void initializeDocks();
  void setupUi();
  void retranslateUi();
  void loadPlugins();
  void readSettings();
  void writeSettings();

  std::vector<std::unique_ptr<WorkstationExtensionPluginInterface> > _extensions;
};

#endif // PATHOLOGYWORKSTATION_H
